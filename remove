#!/usr/bin/env bash

program="local-k8s-rm"

dir=${BASH_SOURCE%/*}

source "$dir/definitions"

echo "$program: removing the local Kubernetes cluster tied to the interface inet $kubenet_if_inet."


tmux_vm_sess_name="kubenet"
if tmux ls | grep -q "$tmux_vm_sess_name"; then
    echo "$program: killing the tmux session \"$tmux_vm_sess_name\" that holds the VMs."
    tmux kill-session -t "$tmux_vm_sess_name"
fi


tmux_vm_ssh_sess_name="kubenet-ssh"
if tmux ls | grep -q "$tmux_vm_ssh_sess_name"; then
    echo "$program: killing the tmux session \"$tmux_vm_ssh_sess_name\" that holds the SSH connections for the VMs."
    tmux kill-session -t "$tmux_vm_ssh_sess_name"
fi


echo "$program: removing VM entries under .ssh/known_hosts."
for vm_id in {0..6}; do
    vm_inet=$(get_inet "$vm_id")
    sed -i '' "/^$vm_inet/d" "$HOME/.ssh/known_hosts"
done


echo "$program: removing the SSH key pair generated for the VMs."
rm -rf "$dir/vms"/vm-ssh-key*


echo "$program: removing the interface created for $kubenet_if_inet."
if_name=""
for i in $(ifconfig -l); do
    inet=$(ifconfig "$i" inet 2> /dev/null)
    if grep -q "$kubenet_if_inet" <<< "$inet"; then
        if_name="$i"
    fi
done

if [[ -n "$if_name" ]]; then
    sudo ifconfig "$if_name" destroy
fi


echo "$program: killing the vmnet_socket process for $kubenet_if_inet."
socket_pid=$(pgrep -f "socket_vmnet" "$kubenet_if_inet")
if [[ -n "$socket_pid" ]]; then
    sudo kill "$socket_pid"
fi


base_dnsmasq_conf=${HOMEBREW_PREFIX:-/opt/homebrew}/etc/dnsmasq.conf
conf_marker="local K8s dnsmasq"
if grep -q "$conf_marker" "$base_dnsmasq_conf"; then
    echo "$program: removing the changes made to \"$base_dnsmasq_conf\"."
    block_start=$(grep -n "Start of $conf_marker" "$base_dnsmasq_conf" | cut -d : -f 1 -)
    block_end=$(grep -n "End of $conf_marker" "$base_dnsmasq_conf" | cut -d : -f 1 -)
    sed -i '' -e "${block_start},${block_end}d" "$base_dnsmasq_conf"
fi


echo "$program: restarting dnsmasq to refresh the listened addresses."
sudo brew services restart dnsmasq


echo "$program: removing generates directories and files during setup."
echo "$program: removing VM directories generated for disk images."
rm -rf "$dir/vms"/control* "$dir/vms"/worker* "$dir/vms/gateway"


echo "$program: removing certs generated by cfssl."
rm -rf "$dir/certs"/*.pem "$dir/certs"/*-key.pem "$dir/certs"/*.csr "$dir/certs"/control*-csr.json "$dir/certs"/worker*-csr.json


echo "$program: removing generated kubeconfigs and encryption key used for etcd."
rm -rf "$dir/certs"/*.kubeconfig "$dir/certs"/encryption-config.yaml


echo "$program: removing local kubeconfig cluster, context, and admin user tied to our cluster."
kubeconfig_key="kubenet"
cluster_admin_user="admin"
if kubectl config get-clusters | grep -q "$kubeconfig_key"; then
    kubectl config delete-cluster kubenet
fi
if kubectl config get-contexts | grep -q "$kubeconfig_key"; then
    kubectl config delete-context kubenet
    kubectl config unset current-context
fi
if kubectl config get-users | grep -q "$cluster_admin_user"; then
    kubectl config delete-user "$cluster_admin_user"
fi

echo "$program: removing the nfsd configuration for \"nfs-pvs\" located in /etc/exports."
sudo sed -i '' -e '/nfs-pvs/d' "/etc/exports"
sudo nfsd update

echo "$program: removing the NFS mountpoint \"nfs-pvs\" created for PersistentVolume's."
rm -rf "$dir/host-machine/nfs-pvs"
